#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GamePanel.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GamePanel")]
	public partial class ModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertPhysicalUser(PhysicalUser instance);
    partial void UpdatePhysicalUser(PhysicalUser instance);
    partial void DeletePhysicalUser(PhysicalUser instance);
    #endregion
		
		public ModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalUser> PhysicalUsers
		{
			get
			{
				return this.GetTable<PhysicalUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _Credits;
		
		private EntitySet<Server> _Servers;
		
		private EntityRef<PhysicalUser> _PhysicalUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    #endregion
		
		public User()
		{
			this._Servers = new EntitySet<Server>(new Action<Server>(this.attach_Servers), new Action<Server>(this.detach_Servers));
			this._PhysicalUser = default(EntityRef<PhysicalUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._PhysicalUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credits", DbType="Int NOT NULL")]
		public int Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Server", Storage="_Servers", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Server> Servers
		{
			get
			{
				return this._Servers;
			}
			set
			{
				this._Servers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalUser_User", Storage="_PhysicalUser", ThisKey="Id", OtherKey="UserId", IsForeignKey=true)]
		public PhysicalUser PhysicalUser
		{
			get
			{
				return this._PhysicalUser.Entity;
			}
			set
			{
				PhysicalUser previousValue = this._PhysicalUser.Entity;
				if (((previousValue != value) 
							|| (this._PhysicalUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhysicalUser.Entity = null;
						previousValue.Users = null;
					}
					this._PhysicalUser.Entity = value;
					if ((value != null))
					{
						value.Users = this;
						this._Id = value.UserId;
					}
					else
					{
						this._Id = default(System.Guid);
					}
					this.SendPropertyChanged("PhysicalUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _DirectoryName;
		
		private bool _Enabled;
		
		private string _Abbreviation;
		
		private string _ConfigurationType;
		
		private int _SlotSteps;
		
		private int _Price;
		
		private System.Nullable<int> _BaseCredits;
		
		private System.Nullable<byte> _Engine;
		
		private System.Nullable<int> _CreditsPerMonth;
		
		private string _DefaultMap;
		
		private EntitySet<Server> _Servers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDirectoryNameChanging(string value);
    partial void OnDirectoryNameChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnConfigurationTypeChanging(string value);
    partial void OnConfigurationTypeChanged();
    partial void OnSlotStepsChanging(int value);
    partial void OnSlotStepsChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnBaseCreditsChanging(System.Nullable<int> value);
    partial void OnBaseCreditsChanged();
    partial void OnEngineChanging(System.Nullable<byte> value);
    partial void OnEngineChanged();
    partial void OnCreditsPerMonthChanging(System.Nullable<int> value);
    partial void OnCreditsPerMonthChanged();
    partial void OnDefaultMapChanging(string value);
    partial void OnDefaultMapChanged();
    #endregion
		
		public Game()
		{
			this._Servers = new EntitySet<Server>(new Action<Server>(this.attach_Servers), new Action<Server>(this.detach_Servers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DirectoryName", DbType="VarChar(50)")]
		public string DirectoryName
		{
			get
			{
				return this._DirectoryName;
			}
			set
			{
				if ((this._DirectoryName != value))
				{
					this.OnDirectoryNameChanging(value);
					this.SendPropertyChanging();
					this._DirectoryName = value;
					this.SendPropertyChanged("DirectoryName");
					this.OnDirectoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ConfigurationType
		{
			get
			{
				return this._ConfigurationType;
			}
			set
			{
				if ((this._ConfigurationType != value))
				{
					this.OnConfigurationTypeChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationType = value;
					this.SendPropertyChanged("ConfigurationType");
					this.OnConfigurationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotSteps", DbType="Int NOT NULL")]
		public int SlotSteps
		{
			get
			{
				return this._SlotSteps;
			}
			set
			{
				if ((this._SlotSteps != value))
				{
					this.OnSlotStepsChanging(value);
					this.SendPropertyChanging();
					this._SlotSteps = value;
					this.SendPropertyChanged("SlotSteps");
					this.OnSlotStepsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCredits", DbType="Int")]
		public System.Nullable<int> BaseCredits
		{
			get
			{
				return this._BaseCredits;
			}
			set
			{
				if ((this._BaseCredits != value))
				{
					this.OnBaseCreditsChanging(value);
					this.SendPropertyChanging();
					this._BaseCredits = value;
					this.SendPropertyChanged("BaseCredits");
					this.OnBaseCreditsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Engine", DbType="TinyInt")]
		public System.Nullable<byte> Engine
		{
			get
			{
				return this._Engine;
			}
			set
			{
				if ((this._Engine != value))
				{
					this.OnEngineChanging(value);
					this.SendPropertyChanging();
					this._Engine = value;
					this.SendPropertyChanged("Engine");
					this.OnEngineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditsPerMonth", DbType="Int")]
		public System.Nullable<int> CreditsPerMonth
		{
			get
			{
				return this._CreditsPerMonth;
			}
			set
			{
				if ((this._CreditsPerMonth != value))
				{
					this.OnCreditsPerMonthChanging(value);
					this.SendPropertyChanging();
					this._CreditsPerMonth = value;
					this.SendPropertyChanged("CreditsPerMonth");
					this.OnCreditsPerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultMap", DbType="VarChar(64)")]
		public string DefaultMap
		{
			get
			{
				return this._DefaultMap;
			}
			set
			{
				if ((this._DefaultMap != value))
				{
					this.OnDefaultMapChanging(value);
					this.SendPropertyChanging();
					this._DefaultMap = value;
					this.SendPropertyChanged("DefaultMap");
					this.OnDefaultMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Server", Storage="_Servers", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<Server> Servers
		{
			get
			{
				return this._Servers;
			}
			set
			{
				this._Servers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Servers(Server entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Server")]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Valve", Type=typeof(ValveServer), IsDefault=true)]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Samp", Type=typeof(SampServer))]
	[global::System.Data.Linq.Mapping.InheritanceMappingAttribute(Code="Minecraft", Type=typeof(MinecraftServer))]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ConfigurationType;
		
		private int _GameId;
		
		private System.Guid _UserId;
		
		private string _Name;
		
		private byte _MaxPlayers;
		
		private string _IP;
		
		private int _Port;
		
		private string _PublicIPAddress;
		
		private bool _IsInstalled;
		
		private bool _IsActivated;
		
		private System.Nullable<System.DateTime> _StartDateTime;
		
		private System.Nullable<System.DateTime> _EndDateTime;
		
		private string _FtpAddress;
		
		private string _FtpPassword;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConfigurationTypeChanging(string value);
    partial void OnConfigurationTypeChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxPlayersChanging(byte value);
    partial void OnMaxPlayersChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnPortChanging(int value);
    partial void OnPortChanged();
    partial void OnPublicIPAddressChanging(string value);
    partial void OnPublicIPAddressChanged();
    partial void OnIsInstalledChanging(bool value);
    partial void OnIsInstalledChanged();
    partial void OnIsActivatedChanging(bool value);
    partial void OnIsActivatedChanged();
    partial void OnStartDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateTimeChanged();
    partial void OnEndDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateTimeChanged();
    partial void OnFtpAddressChanging(string value);
    partial void OnFtpAddressChanged();
    partial void OnFtpPasswordChanging(string value);
    partial void OnFtpPasswordChanged();
    #endregion
		
		public Server()
		{
			this._Game = default(EntityRef<Game>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigurationType", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsDiscriminator=true)]
		public string ConfigurationType
		{
			get
			{
				return this._ConfigurationType;
			}
			set
			{
				if ((this._ConfigurationType != value))
				{
					this.OnConfigurationTypeChanging(value);
					this.SendPropertyChanging();
					this._ConfigurationType = value;
					this.SendPropertyChanged("ConfigurationType");
					this.OnConfigurationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(192) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayers", DbType="TinyInt NOT NULL")]
		public byte MaxPlayers
		{
			get
			{
				return this._MaxPlayers;
			}
			set
			{
				if ((this._MaxPlayers != value))
				{
					this.OnMaxPlayersChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayers = value;
					this.SendPropertyChanged("MaxPlayers");
					this.OnMaxPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Port", DbType="Int NOT NULL")]
		public int Port
		{
			get
			{
				return this._Port;
			}
			set
			{
				if ((this._Port != value))
				{
					this.OnPortChanging(value);
					this.SendPropertyChanging();
					this._Port = value;
					this.SendPropertyChanged("Port");
					this.OnPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicIPAddress", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string PublicIPAddress
		{
			get
			{
				return this._PublicIPAddress;
			}
			set
			{
				if ((this._PublicIPAddress != value))
				{
					this.OnPublicIPAddressChanging(value);
					this.SendPropertyChanging();
					this._PublicIPAddress = value;
					this.SendPropertyChanged("PublicIPAddress");
					this.OnPublicIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInstalled", DbType="Bit NOT NULL")]
		public bool IsInstalled
		{
			get
			{
				return this._IsInstalled;
			}
			set
			{
				if ((this._IsInstalled != value))
				{
					this.OnIsInstalledChanging(value);
					this.SendPropertyChanging();
					this._IsInstalled = value;
					this.SendPropertyChanged("IsInstalled");
					this.OnIsInstalledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActivated", DbType="Bit NOT NULL")]
		public bool IsActivated
		{
			get
			{
				return this._IsActivated;
			}
			set
			{
				if ((this._IsActivated != value))
				{
					this.OnIsActivatedChanging(value);
					this.SendPropertyChanging();
					this._IsActivated = value;
					this.SendPropertyChanged("IsActivated");
					this.OnIsActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FtpAddress", DbType="VarChar(50)")]
		public string FtpAddress
		{
			get
			{
				return this._FtpAddress;
			}
			set
			{
				if ((this._FtpAddress != value))
				{
					this.OnFtpAddressChanging(value);
					this.SendPropertyChanging();
					this._FtpAddress = value;
					this.SendPropertyChanged("FtpAddress");
					this.OnFtpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FtpPassword", DbType="VarChar(50)")]
		public string FtpPassword
		{
			get
			{
				return this._FtpPassword;
			}
			set
			{
				if ((this._FtpPassword != value))
				{
					this.OnFtpPasswordChanging(value);
					this.SendPropertyChanging();
					this._FtpPassword = value;
					this.SendPropertyChanged("FtpPassword");
					this.OnFtpPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Server", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Servers.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Servers.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(int);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Server", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Servers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Servers.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class ValveServer : Server
	{
		
		private System.Nullable<int> _MaximumFPS;
		
		private string _RconPassword;
		
		private System.Nullable<bool> _AutoUpdate;
		
		private string _Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaximumFPSChanging(System.Nullable<int> value);
    partial void OnMaximumFPSChanged();
    partial void OnRconPasswordChanging(string value);
    partial void OnRconPasswordChanged();
    partial void OnAutoUpdateChanging(System.Nullable<bool> value);
    partial void OnAutoUpdateChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    #endregion
		
		public ValveServer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaximumFPS", DbType="Int")]
		public System.Nullable<int> MaximumFPS
		{
			get
			{
				return this._MaximumFPS;
			}
			set
			{
				if ((this._MaximumFPS != value))
				{
					this.OnMaximumFPSChanging(value);
					this.SendPropertyChanging();
					this._MaximumFPS = value;
					this.SendPropertyChanged("MaximumFPS");
					this.OnMaximumFPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RconPassword", DbType="VarChar(256)")]
		public string RconPassword
		{
			get
			{
				return this._RconPassword;
			}
			set
			{
				if ((this._RconPassword != value))
				{
					this.OnRconPasswordChanging(value);
					this.SendPropertyChanging();
					this._RconPassword = value;
					this.SendPropertyChanged("RconPassword");
					this.OnRconPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoUpdate", DbType="Bit")]
		public System.Nullable<bool> AutoUpdate
		{
			get
			{
				return this._AutoUpdate;
			}
			set
			{
				if ((this._AutoUpdate != value))
				{
					this.OnAutoUpdateChanging(value);
					this.SendPropertyChanging();
					this._AutoUpdate = value;
					this.SendPropertyChanged("AutoUpdate");
					this.OnAutoUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="VarChar(64)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
	}
	
	public partial class SampServer : Server
	{
		
		private string _RconPassword;
		
		private string _HostName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRconPasswordChanging(string value);
    partial void OnRconPasswordChanged();
    partial void OnHostNameChanging(string value);
    partial void OnHostNameChanged();
    #endregion
		
		public SampServer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RconPassword", DbType="VarChar(256)")]
		public string RconPassword
		{
			get
			{
				return this._RconPassword;
			}
			set
			{
				if ((this._RconPassword != value))
				{
					this.OnRconPasswordChanging(value);
					this.SendPropertyChanging();
					this._RconPassword = value;
					this.SendPropertyChanged("RconPassword");
					this.OnRconPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostName", DbType="VarChar(192) NOT NULL", CanBeNull=false)]
		public string HostName
		{
			get
			{
				return this._HostName;
			}
			set
			{
				if ((this._HostName != value))
				{
					this.OnHostNameChanging(value);
					this.SendPropertyChanging();
					this._HostName = value;
					this.SendPropertyChanged("HostName");
					this.OnHostNameChanged();
				}
			}
		}
	}
	
	public partial class MinecraftServer : Server
	{
		
		private System.Nullable<bool> _Pvp;
		
		private System.Nullable<byte> _SpawnProtection;
		
		private System.Nullable<bool> _AllowFlight;
		
		private System.Nullable<bool> _SpawnAnimals;
		
		private System.Nullable<bool> _SpawnMonsters;
		
		private System.Nullable<byte> _ViewDistance;
		
		private System.Nullable<bool> _AllowNether;
		
		private System.Nullable<bool> _WhiteList;
		
		private System.Nullable<bool> _OnlineMode;
		
		private string _World;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPvpChanging(System.Nullable<bool> value);
    partial void OnPvpChanged();
    partial void OnSpawnProtectionChanging(System.Nullable<byte> value);
    partial void OnSpawnProtectionChanged();
    partial void OnAllowFlightChanging(System.Nullable<bool> value);
    partial void OnAllowFlightChanged();
    partial void OnSpawnAnimalsChanging(System.Nullable<bool> value);
    partial void OnSpawnAnimalsChanged();
    partial void OnSpawnMonstersChanging(System.Nullable<bool> value);
    partial void OnSpawnMonstersChanged();
    partial void OnViewDistanceChanging(System.Nullable<byte> value);
    partial void OnViewDistanceChanged();
    partial void OnAllowNetherChanging(System.Nullable<bool> value);
    partial void OnAllowNetherChanged();
    partial void OnWhiteListChanging(System.Nullable<bool> value);
    partial void OnWhiteListChanged();
    partial void OnOnlineModeChanging(System.Nullable<bool> value);
    partial void OnOnlineModeChanged();
    partial void OnWorldChanging(string value);
    partial void OnWorldChanged();
    #endregion
		
		public MinecraftServer()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pvp", DbType="Bit")]
		public System.Nullable<bool> Pvp
		{
			get
			{
				return this._Pvp;
			}
			set
			{
				if ((this._Pvp != value))
				{
					this.OnPvpChanging(value);
					this.SendPropertyChanging();
					this._Pvp = value;
					this.SendPropertyChanged("Pvp");
					this.OnPvpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpawnProtection", DbType="TinyInt")]
		public System.Nullable<byte> SpawnProtection
		{
			get
			{
				return this._SpawnProtection;
			}
			set
			{
				if ((this._SpawnProtection != value))
				{
					this.OnSpawnProtectionChanging(value);
					this.SendPropertyChanging();
					this._SpawnProtection = value;
					this.SendPropertyChanged("SpawnProtection");
					this.OnSpawnProtectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowFlight", DbType="Bit")]
		public System.Nullable<bool> AllowFlight
		{
			get
			{
				return this._AllowFlight;
			}
			set
			{
				if ((this._AllowFlight != value))
				{
					this.OnAllowFlightChanging(value);
					this.SendPropertyChanging();
					this._AllowFlight = value;
					this.SendPropertyChanged("AllowFlight");
					this.OnAllowFlightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpawnAnimals", DbType="Bit")]
		public System.Nullable<bool> SpawnAnimals
		{
			get
			{
				return this._SpawnAnimals;
			}
			set
			{
				if ((this._SpawnAnimals != value))
				{
					this.OnSpawnAnimalsChanging(value);
					this.SendPropertyChanging();
					this._SpawnAnimals = value;
					this.SendPropertyChanged("SpawnAnimals");
					this.OnSpawnAnimalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpawnMonsters", DbType="Bit")]
		public System.Nullable<bool> SpawnMonsters
		{
			get
			{
				return this._SpawnMonsters;
			}
			set
			{
				if ((this._SpawnMonsters != value))
				{
					this.OnSpawnMonstersChanging(value);
					this.SendPropertyChanging();
					this._SpawnMonsters = value;
					this.SendPropertyChanged("SpawnMonsters");
					this.OnSpawnMonstersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewDistance", DbType="TinyInt")]
		public System.Nullable<byte> ViewDistance
		{
			get
			{
				return this._ViewDistance;
			}
			set
			{
				if ((this._ViewDistance != value))
				{
					this.OnViewDistanceChanging(value);
					this.SendPropertyChanging();
					this._ViewDistance = value;
					this.SendPropertyChanged("ViewDistance");
					this.OnViewDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowNether", DbType="Bit")]
		public System.Nullable<bool> AllowNether
		{
			get
			{
				return this._AllowNether;
			}
			set
			{
				if ((this._AllowNether != value))
				{
					this.OnAllowNetherChanging(value);
					this.SendPropertyChanging();
					this._AllowNether = value;
					this.SendPropertyChanged("AllowNether");
					this.OnAllowNetherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhiteList", DbType="Bit")]
		public System.Nullable<bool> WhiteList
		{
			get
			{
				return this._WhiteList;
			}
			set
			{
				if ((this._WhiteList != value))
				{
					this.OnWhiteListChanging(value);
					this.SendPropertyChanging();
					this._WhiteList = value;
					this.SendPropertyChanged("WhiteList");
					this.OnWhiteListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnlineMode", DbType="Bit")]
		public System.Nullable<bool> OnlineMode
		{
			get
			{
				return this._OnlineMode;
			}
			set
			{
				if ((this._OnlineMode != value))
				{
					this.OnOnlineModeChanging(value);
					this.SendPropertyChanging();
					this._OnlineMode = value;
					this.SendPropertyChanged("OnlineMode");
					this.OnOnlineModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Map", Storage="_World", DbType="VarChar(64)")]
		public string World
		{
			get
			{
				return this._World;
			}
			set
			{
				if ((this._World != value))
				{
					this.OnWorldChanging(value);
					this.SendPropertyChanging();
					this._World = value;
					this.SendPropertyChanged("World");
					this.OnWorldChanged();
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class PhysicalUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public PhysicalUser()
		{
			this._Users = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalUser_User", Storage="_Users", ThisKey="UserId", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public User Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				User previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.PhysicalUser = null;
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.PhysicalUser = this;
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
